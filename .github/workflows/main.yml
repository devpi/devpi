---
name: "CI"

on:
  push:
  schedule:
    - cron: '10 3 * * 1'

jobs:
  packages:
    name: "Create packages"
    runs-on: "ubuntu-latest"
    env:
      PY_COLORS: 1

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.6"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel devpi-client "towncrier!=21.3.0" check-manifest
      - name: "Create packages"
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          devpi use https://m.devpi.net/devpi-github
          devpi login devpi-github --password ${{ secrets.DEVPI_GITHUB_PASSWORD }}
          python .ci/cleanup_devpi_indices.py
          .ci/upload-packages.sh

  common-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    strategy:
      matrix:
        include:
          - project: "common"
            python-version: "2.7"
            os: "ubuntu-latest"
            tox-envs: "py27"
          - project: "common"
            python-version: "pypy-2.7"
            os: "ubuntu-latest"
            tox-envs: "pypy"
          - project: "common"
            python-version: "3.5"
            os: "ubuntu-latest"
            tox-envs: "py35"
          - project: "common"
            python-version: "3.10"
            os: "ubuntu-latest"
            tox-envs: "py310"
          - project: "common"
            python-version: "pypy-3.7"
            os: "ubuntu-latest"
            tox-envs: "pypy3"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  bbb-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    strategy:
      matrix:
        include:
          - project: "client"
            python-version: "2.7"
            os: "ubuntu-latest"
            tox-envs: "py27-server4"
          - project: "web"
            python-version: "3.5"
            os: "ubuntu-latest"
            tox-envs: "py35-server520"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  client-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: "packages"
    strategy:
      matrix:
        include:
          - project: "client"
            python-version: "2.7"
            os: "ubuntu-latest"
            tox-envs: "py27,py27-version,py27-lin"
          - project: "client"
            python-version: "3.5"
            os: "ubuntu-latest"
            tox-envs: "py35"
          - project: "client"
            python-version: "3.10"
            os: "ubuntu-latest"
            tox-envs: "py310"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  server-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: "packages"
    strategy:
      matrix:
        include:
          - project: "server"
            python-version: "3.7"
            os: "ubuntu-latest"
            tox-envs: "py37"
          - project: "server"
            python-version: "3.7"
            os: "ubuntu-latest"
            tox-envs: "py37-keyfs_sqlite"
          - project: "server"
            python-version: "3.10"
            os: "ubuntu-latest"
            tox-envs: "py310"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  web-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: "packages"
    strategy:
      matrix:
        include:
          - project: "web"
            python-version: "3.7"
            os: "ubuntu-latest"
            tox-envs: "py37"
          - project: "web"
            python-version: "3.7"
            os: "ubuntu-latest"
            tox-envs: "py37-keyfs"
          - project: "web"
            python-version: "3.10"
            os: "ubuntu-latest"
            tox-envs: "py310"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  nightly-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: ["client-tests", "server-tests", "web-tests"]
    strategy:
      matrix:
        include:
          - project: "common"
            python-version: "3.11.0-alpha - 3.11.99"
            os: "ubuntu-latest"
            tox-envs: "py311"
          - project: "client"
            python-version: "3.11.0-alpha - 3.11.99"
            os: "ubuntu-latest"
            tox-envs: "py311"
          - project: "server"
            python-version: "3.11.0-alpha - 3.11.99"
            os: "ubuntu-latest"
            tox-envs: "py311"
          - project: "web"
            python-version: "3.11.0-alpha - 3.11.99"
            os: "ubuntu-latest"
            tox-envs: "py311"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        continue-on-error: true
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  postgresql-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: ["server-tests"]
    strategy:
      matrix:
        include:
          - project: "postgresql"
            python-version: "3.7"
            os: "ubuntu-latest"
            tox-envs: "py37-postgresql"
          - project: "postgresql"
            python-version: "3.7"
            os: "ubuntu-latest"
            tox-envs: "py37-server"
          # - project: "postgresql"
          #   python-version: "3.7"
          #   os: "ubuntu-latest"
          #   tox-envs: "py37-server_postgresql_ssl"
          - project: "postgresql"
            python-version: "3.10"
            os: "ubuntu-latest"
            tox-envs: "py310-postgresql"
          - project: "postgresql"
            python-version: "3.10"
            os: "ubuntu-latest"
            tox-envs: "py310-server"
          # - project: "postgresql"
          #   python-version: "3.10"
          #   os: "ubuntu-latest"
          #   tox-envs: "py310-server_postgresql_ssl"
          - project: "postgresql"
            python-version: "pypy-3.7"
            os: "ubuntu-latest"
            tox-envs: "pypy3-postgresql"
          - project: "postgresql"
            python-version: "pypy-3.7"
            os: "ubuntu-latest"
            tox-envs: "pypy3-server"
          # - project: "postgresql"
          #   python-version: "pypy-3.7"
          #   os: "ubuntu-latest"
          #   tox-envs: "pypy3-server_postgresql_ssl"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          export POSTGRESQL_BIN_DIR=$(ls -d /usr/lib/postgresql/*/bin)
          ls $POSTGRESQL_BIN_DIR
          export PATH=$PATH:$POSTGRESQL_BIN_DIR
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  postgresql-web-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: ["server-tests", "web-tests"]
    strategy:
      matrix:
        include:
          - project: "postgresql"
            python-version: "3.7"
            os: "ubuntu-latest"
            tox-envs: "py37-web"
          - project: "postgresql"
            python-version: "3.10"
            os: "ubuntu-latest"
            tox-envs: "py310-web"
          - project: "postgresql"
            python-version: "pypy-3.7"
            os: "ubuntu-latest"
            tox-envs: "pypy3-web"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          export POSTGRESQL_BIN_DIR=$(ls -d /usr/lib/postgresql/*/bin)
          ls $POSTGRESQL_BIN_DIR
          export PATH=$PATH:$POSTGRESQL_BIN_DIR
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  pypy-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: ["client-tests", "server-tests", "web-tests"]
    strategy:
      matrix:
        include:
          - project: "client"
            python-version: "pypy-2.7"
            os: "ubuntu-latest"
            tox-envs: "pypy"
          - project: "client"
            python-version: "pypy-3.7"
            os: "ubuntu-latest"
            tox-envs: "pypy3"
          - project: "server"
            python-version: "pypy-3.7"
            os: "ubuntu-latest"
            tox-envs: "pypy3"
          - project: "web"
            python-version: "pypy-3.7"
            os: "ubuntu-latest"
            tox-envs: "pypy3"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  postgresql-nightly-tests:
    if: true
    name: "${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }}"
    needs: ["postgresql-tests", "postgresql-web-tests"]
    strategy:
      matrix:
        include:
          - project: "postgresql"
            python-version: "3.11.0-alpha - 3.11.99"
            os: "ubuntu-latest"
            tox-envs: "py311-postgresql"
          - project: "postgresql"
            python-version: "3.11.0-alpha - 3.11.99"
            os: "ubuntu-latest"
            tox-envs: "py311-server"
          - project: "postgresql"
            python-version: "3.11.0-alpha - 3.11.99"
            os: "ubuntu-latest"
            tox-envs: "py311-web"
          # - project: "postgresql"
          #   python-version: "3.11.0-alpha - 3.11.99"
          #   os: "ubuntu-latest"
          #   tox-envs: "py311-server_postgresql_ssl"

    env:
      PY_COLORS: 1
      PROJECT: "${{ matrix.project }}"

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe -o nounset
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel tox
      - name: "Run tox targets for ${{ matrix.project }} (${{ matrix.tox-envs }}) with ${{ matrix.python-version }} on ${{ matrix.os }}"
        continue-on-error: true
        run: |
          set -xe -o nounset
          source .ci/set-index-env.sh
          export POSTGRESQL_BIN_DIR=$(ls -d /usr/lib/postgresql/*/bin)
          ls $POSTGRESQL_BIN_DIR
          export PATH=$PATH:$POSTGRESQL_BIN_DIR
          cd $PROJECT
          python -m tox -a -vv
          python -m tox --pre -v -e ${{ matrix.tox-envs }} -- -v --color=yes
